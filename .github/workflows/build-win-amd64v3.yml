name: Build WINDOWS AMD64V3 Binary

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  build-template:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [v1.7.8, v1.8.14, beta, current]
    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.x'
          check-latest: true

      - name: Install dependencies
        run: sudo apt-get install -y sed wget

      - name: Build binary
        env:
          TAGS: ${{ vars.TAGS }}
        run: |
          if [ "${{ matrix.version }}" == "beta" ]; then
            VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases | grep 'tag_name' | head -n 1 | awk -F\" '{print $4}')
            sudo env GOOS=windows GOARCH=amd64 GOAMD64=v3 CGO_ENABLED=0 go install -ldflags "-X github.com/sagernet/sing-box/constant.Version=$VERSION" -v -tags ${{ vars.TAGS }} github.com/sagernet/sing-box/cmd/sing-box@$VERSION
            sudo mv -f /root/go/bin/windows_amd64/sing-box.exe ./sing-box-${{ matrix.version }}.exe
          elif [ "${{ matrix.version }}" == "current" ]; then
            VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases | grep 'tag_name' | grep -v 'alpha' | grep -v 'rc' | grep -v 'beta' | head -n 1 | awk -F\" '{print $4}')
            sudo env GOOS=windows GOARCH=amd64 GOAMD64=v3 CGO_ENABLED=0 go install -ldflags "-X github.com/sagernet/sing-box/constant.Version=$VERSION" -v -tags ${{ vars.TAGS }} github.com/sagernet/sing-box/cmd/sing-box@$VERSION
            sudo mv -f /root/go/bin/windows_amd64/sing-box.exe ./sing-box-${{ matrix.version }}.exe
          else
            sudo wget -O ./sing-box-${{ matrix.version }}.exe https://github.com/HXHGTS/Singbox-Install/releases/latest/download/sing-box-${{ matrix.version }}.exe
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: sing-box-${{ matrix.version }}
          path: ./sing-box-${{ matrix.version }}.exe

  aggregate-results:
    runs-on: ubuntu-latest
    needs: build-template
    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: sing-box-v1.7.8
          path: ./release

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: sing-box-v1.8.14
          path: ./release

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: sing-box-beta
          path: ./release

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: sing-box-current
          path: ./release

      - name: Rename Files
        run: |
          mv -f ./release/sing-box-current.exe ./release/sing-box.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_RUNNER_DEBUG: true
          ACTIONS_STEP_DEBUG: true

      - name: Push Files
        run: |
          git config --global user.email "${{ secrets.GH_EMAIL }}"
          git config --global user.name "github-actions[bot]"
          sudo git add ./release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_RUNNER_DEBUG: true
          ACTIONS_STEP_DEBUG: true

      - name: Create tag
        id: create_tag
        run: |
          TAG_NAME=$(date -u +"%Y%m%d%H%M%S")
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, deleting it from remote."
            git push --delete origin "$TAG_NAME"
            while git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; do
              echo "Waiting for tag $TAG_NAME to be deleted..."
              sleep 5
            done
          fi
          git tag $TAG_NAME
          git push --force origin $TAG_NAME
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        id: create_release
        run: |
          TAG_NAME=${{ steps.create_tag.outputs.TAG_NAME }}
          RELEASE_ID=$(gh release view "$TAG_NAME" --json id --jq '.id' || echo "null")
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Release $TAG_NAME already exists, deleting it."
            gh release delete "$TAG_NAME" --yes
          fi
          gh release create "$TAG_NAME" --title "$TAG_NAME" --notes "Auto-generated release for $TAG_NAME" ./release/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
